import Head from "next/head";
import { useEffect, useState } from "react";
import Main from "../src/components/Main/Main";
import { goUp, goDown, goRight, goLeft } from "../src/utils/SlidesUtils";
import Contacts from "../src/components/Contact/Contacts";
import Projects from "../src/components/Projects/Projects";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import contentfulClient from "../src/client/ContentfulClient";
import { mapHomePhotos, mapProjects } from "../src/utils/ProjectUtils";
import { Project } from "../src/types/Project";
import Arrow from "../src/components/Arrow/Arrow";
import projectIcon from "../src/images/icons8-projects.webp";
import contactIcon from "../src/images/icons8-contacts.webp";
import calendarIcon from "../src/images/icons8-calendar-50.webp";
import infoIcon from "../src/images/info.webp";
import Events from "../src/components/Events/Events";
import { handleArrows } from "../src/utils/AnimeUtils";
import { mapEvents } from "../src/utils/EventsUtils";
import { Event } from "../src/types/Event";
import AboutUs from "../src/components/AboutUs/AboutUs";

export async function getStaticProps() {
  const contentfulProjects = await contentfulClient
    .getEntries({
      content_type: "project",
    })
    .then((res) => res.items);
  const projects = mapProjects(contentfulProjects);

  const contentfulhomePhotos = await contentfulClient
    .getEntries({
      content_type: "homeFoto",
    })
  const homePhotos = mapHomePhotos(contentfulhomePhotos.includes.Asset)

  const contentfulEvents = await contentfulClient
    .getEntries({
      content_type: "event",
    })
    .then((res) => res.items);
  const events = mapEvents(contentfulEvents);

  const aboutUs = await contentfulClient
    .getEntries({
      content_type: "aboutUs",
    })
    .then((res) => res.items);

  return { props: { projects, homePhotos, events, aboutUs } };
}

export default function Home(props: { projects: Project[], events: Event[], homePhotos: any, aboutUs:any }) {
  const [active, setActive] = useState("main");
  const [hideTop, setHideTop] = useState(false);
  const [hideBottom, setHideBottom] = useState(false);
  const [hideLeft, setHideLeft] = useState(false);
  const [hideRight, setHideRight] = useState(false);

  useEffect(() => {
    handleArrows(active, setHideTop, setHideBottom, setHideRight, setHideLeft);
    
  }, [active]);
  return (
    <div className="index">
      <style>
        {`html, body {
        overflow: hidden;
        min-width: 100vw;
        min-height: 100dvh;
        position: absolute;
      }`}
      </style>
      <Head>
        <title>Ph√©notype360</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Arrow
        icon={projectIcon}
        hide={hideTop}
        active={active}
        setActive={setActive}
        arrowClass="arrow_up"
        direction={goUp}
      />

      <Arrow
        icon={calendarIcon}
        hide={hideRight}
        active={active}
        setActive={setActive}
        arrowClass="arrow_right"
        direction={goRight}
      />

      <Main photos={props.homePhotos} />
      <Contacts active={active} setActive={setActive} />
      <Projects active={active} setActive={setActive} projects={props.projects} />
      <Events active={active} setActive={setActive} eventsProps={props.events} />
      <AboutUs active={active} setActive={setActive} aboutUs={props.aboutUs} />

      <Arrow
        icon={infoIcon}
        hide={hideLeft}
        active={active}
        setActive={setActive}
        arrowClass="arrow_left"
        direction={goLeft}
      />

      <Arrow
        hide={hideBottom}
        arrowClass="arrow_down"
        icon={contactIcon}
        active={active}
        setActive={setActive}
        direction={goDown}
      />

      <ToastContainer
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />
    </div>
  );
}
